import "tfplan"

# Get an array of all resources of the given type (or an empty array).
get_resources = func(type) {
	if length(tfplan.module_paths else []) > 0 { # always true in the real tfplan import
		return get_resources_all_modules(type)
	} else { # fallback for tests
		return get_resources_root_only(type)
	}
}

get_resources_root_only = func(type) {
	resources = []
	named_and_counted_resources = tfplan.resources[type] else {}
	# Get resource bodies out of nested resource maps, from:
	# {"name": {"0": {"applied": {...}, "diff": {...} }, "1": {...}}, "name": {...}}
	# to:
	# [{"applied": {...}, "diff": {...}}, {"applied": {...}, "diff": {...}}, ...]
	for named_and_counted_resources as _, instances {
		for instances as _, body {
			append(resources, body)
		}
	}
	return resources
}

get_resources_all_modules = func(type) {
	resources = []
	for tfplan.module_paths as path {
		named_and_counted_resources = tfplan.module(path).resources[type] else {}
		# Get resource bodies out of nested resource maps, from:
		# {"name": {"0": {"applied": {...}, "diff": {...} }, "1": {...}}, "name": {...}}
		# to:
		# [{"applied": {...}, "diff": {...}}, {"applied": {...}, "diff": {...}}, ...]
		for named_and_counted_resources as _, instances {
			for instances as _, body {
				append(resources, body)
			}
		}
	}
	return resources
}

allowed_machine_types = [
	"n1-standard-1",
	"n1-standard-2",
]

allowed_deployment_regions = "australia-southeast1"

allowed_deployment_zones = [
    "australia-southeast1-a",
    "australia-southeast1-b",
]

machine_type_allowed = rule {
	all get_resources("google_compute_instance") as r {
		r.applied.machine_type in allowed_machine_types
	}
}

deployment_region_allowed = rule { 
    all get_resources("google_compute_instance") as r {
        r.applied.region in allowed_deployment_regions
    }
}

deployment_zone_allowed = rule { 
    all get_resources("google_compute_instance") as r {
        r.applied.zone in allowed_deployment_zones
    }
}

main = rule {
	(machine_type_allowed) and (deployment_region_allowed) and (deployment_zone_allowed) else true
}


#deployment_rules_allowed = rule { 
#    all get_resources("google_compute_instance") as r {
#        r.applied.machine_type in allowed_machine_types;
#        r.applied.zone in allowed_deployment_zones;
#        r.applied.zone in allowed_deployment_regions;
#    }
#}
#
#main = rule {
#	(deployment_rules_allowed) else true
#}


